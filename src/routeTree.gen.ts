/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ConceptRouteImport } from './routes/concept'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MapsIndexRouteImport } from './routes/maps.index'
import { Route as MapsPlanetRouteImport } from './routes/maps.$planet'

const ConceptRoute = ConceptRouteImport.update({
  id: '/concept',
  path: '/concept',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MapsIndexRoute = MapsIndexRouteImport.update({
  id: '/maps/',
  path: '/maps/',
  getParentRoute: () => rootRouteImport,
} as any)
const MapsPlanetRoute = MapsPlanetRouteImport.update({
  id: '/maps/$planet',
  path: '/maps/$planet',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/concept': typeof ConceptRoute
  '/maps/$planet': typeof MapsPlanetRoute
  '/maps': typeof MapsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/concept': typeof ConceptRoute
  '/maps/$planet': typeof MapsPlanetRoute
  '/maps': typeof MapsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/concept': typeof ConceptRoute
  '/maps/$planet': typeof MapsPlanetRoute
  '/maps/': typeof MapsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/concept' | '/maps/$planet' | '/maps'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/concept' | '/maps/$planet' | '/maps'
  id: '__root__' | '/' | '/about' | '/concept' | '/maps/$planet' | '/maps/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ConceptRoute: typeof ConceptRoute
  MapsPlanetRoute: typeof MapsPlanetRoute
  MapsIndexRoute: typeof MapsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/concept': {
      id: '/concept'
      path: '/concept'
      fullPath: '/concept'
      preLoaderRoute: typeof ConceptRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/maps/': {
      id: '/maps/'
      path: '/maps'
      fullPath: '/maps'
      preLoaderRoute: typeof MapsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/maps/$planet': {
      id: '/maps/$planet'
      path: '/maps/$planet'
      fullPath: '/maps/$planet'
      preLoaderRoute: typeof MapsPlanetRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ConceptRoute: ConceptRoute,
  MapsPlanetRoute: MapsPlanetRoute,
  MapsIndexRoute: MapsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
